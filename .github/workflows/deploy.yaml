name: Deploy Components

on:
  workflow_dispatch:  # Se puede lanzar manualmente desde GitHub Actions

jobs:
  read-scope-and-trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read scope.json and Trigger Deployments
        id: read_and_trigger
        run: |
          echo "Leyendo scope.json..."
          COMPONENTS=$(jq -c '.release.components.component[]' scope.json)
          echo "Leyendo y lanzando despliegues para cada componente..."

          # Inicialización de array para IDs de despliegue
          DEPLOYMENT_IDS=()

          for component in $(echo "$COMPONENTS" | jq -c '.'); do
            NAME=$(echo $component | jq -r '.name')
            VERSION=$(echo $component | jq -r '.version')
            REPO_URL=$(echo $component | jq -r '.repo')
            REPO_PATH=$(echo $REPO_URL | sed -E 's|https://api.github.com/repos/||')

            # Aquí puedes modificar la rama de despliegue según sea necesario
            BRANCH_NAME="main"  # Cambiar por el nombre de la rama que utilices

            # Obtener el SHA del último commit de la rama
            COMMIT_SHA=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              "https://api.github.com/repos/juananmora/$NAME/branches/$BRANCH_NAME" \
              | jq -r '.commit.sha')

            if [ "$COMMIT_SHA" == "null" ]; then
              echo "No se pudo obtener el SHA del commit para la rama $BRANCH_NAME en el repositorio https://api.github.com/repos/juananmora/$NAME/branches/$BRANCH_NAME"
              exit 1
            fi

            echo "🚀 Lanzando despliegue para $NAME (Versión: $VERSION) en $REPO_PATH en la rama $BRANCH_NAME (SHA: $COMMIT_SHA)"

            # Llamada API para disparar el workflow de despliegue usando el SHA
            DEPLOYMENT_ID=$(curl -s -X POST "https://api.github.com/repos/juananmora/$NAME/actions/workflows/deploy.yml/dispatches" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer $GH_TOKEN" \
              -d "{\"ref\":\"$COMMIT_SHA\", \"inputs\": {\"version\": \"$VERSION\"}}")

            echo "Disparado despliegue para $NAME, estado: $DEPLOYMENT_ID"

            # Agregar ID del despliegue al array para hacer seguimiento
            DEPLOYMENT_IDS+=("$REPO_PATH|$DEPLOYMENT_ID")
          done

          echo "DEPLOYMENT_IDS=${DEPLOYMENT_IDS[@]}" >> $GITHUB_ENV

      - name: Wait for Deployments to Finish
        id: wait_for_deployments
        run: |
          echo "🕐 Esperando que todos los despliegues finalicen..."
          all_success=true

          # Comprobar el estado de cada despliegue
          for entry in "${DEPLOYMENT_IDS[@]}"; do
            IFS="|" read -r REPO_PATH DEPLOYMENT_ID <<< "$entry"

            STATUS="in_progress"
            while [[ "$STATUS" == "in_progress" || "$STATUS" == "queued" ]]; do
              sleep 10
              STATUS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
                "https://api.github.com/repos/juananmora/$NAME/actions/runs/$DEPLOYMENT_ID" \
                | jq -r '.status')
              echo "🔄 Estado de $REPO_PATH: $STATUS"
            done

            CONCLUSION=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
              "https://api.github.com/repos/$REPO_PATH/actions/runs/$DEPLOYMENT_ID" \
              | jq -r '.conclusion')
            echo "✔️ Resultado final de $REPO_PATH: $CONCLUSION"

            if [[ "$CONCLUSION" != "success" ]]; then
              all_success=false
            fi
          done

          echo "all_success=$all_success" >> $GITHUB_ENV

  finalize:
    needs: read-scope-and-trigger
    if: ${{ needs.read-scope-and-trigger.outputs.all_success == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Say Hello World
        run: echo "🎉 ¡Hola Mundo! Todos los despliegues fueron exitosos."
